

# **Kubernetes Learning Essentials**

## Introduction to Kubernetes

Kubernetes is an advanced container orchestration platform known for its remarkable capabilities:

- Clustering
- Auto-healing
- Auto-scaling
- Extensive enterprise-level support

### **Comparison with Docker**

Kubernetes goes beyond Docker, offering:

- Clustering
- Auto-healing
- Auto-scaling
- Extensive enterprise-level support

## Kubernetes Components

### **Worker Node Components**

Kubernetes worker nodes comprise three crucial components:

1. **Kubelet**: Ensures pods are running seamlessly.
2. **Kube Proxy**: Manages networking and load balancing.
3. **Container Runtime**: Executes containers effectively.

### **Control Plane Components**

The control plane components drive the core functionality of Kubernetes:

1. **API Server**: The heart of Kubernetes, it receives external requests.
2. **Scheduler**: Allocates resources as per API server instructions.
3. **etcd**: A robust key-value store housing cluster information.
4. **Controller Manager**: Oversees built-in controllers like ReplicaSets.
5. **Cloud Controller Manager (Optional)**: Translates cloud-specific requests.

## Kubernetes Cluster Installation

Learn to set up a Kubernetes cluster on your local machine, with a focus on creating a development cluster.

### **Prerequisites for MiniKube**

Before starting with MiniKube, ensure your system meets these requirements:

- At least 2 CPUs
- 2GB of RAM
- 20GB of free disk space
- An internet connection
- A hypervisor for managing virtual machines

### **Installing MiniKube**

You can download MiniKube for your operating system from the official documentation or use provided scripts. Initialize your MiniKube cluster with `minikube start`.

### **Installing kubectl (kube control)**

Kubectl is your essential Kubernetes command-line tool for cluster interaction. Download it from the official Kubernetes documentation and configure it to work with your cluster.

### **Managing MiniKube**

MiniKube provides various commands for handling your local Kubernetes clusters, including starting, stopping, and deleting them.

## Pods in Kubernetes

In Kubernetes, the fundamental unit for deploying containers is the **Pod**. A Pod defines how one or more containers should run, specified in a YAML file. While a Pod usually contains a single container, multiple containers can serve special purposes.

### **Why Use Pods**

- Pods offer a standardized way to define container execution.
- They encapsulate container settings in a YAML file for clarity and consistency.

### **Advantages of Pods**

- Containers within the same Pod can communicate over localhost.
- Sharing storage volumes between containers in the same Pod is possible.
- Pods simplify container management by grouping them together.

### **Kubernetes Cluster IP**

Pods are assigned a cluster IP address for accessing applications within containers. **Cube Proxy** generates these cluster IP addresses.

## **Kubectl (Kube Control)**

Kubectl, the Kubernetes command-line tool, empowers you to manage, inspect, and control components within your Kubernetes cluster.

### **Local Kubernetes Cluster with Minikube**

Minikube is an invaluable tool for setting up a local, lightweight Kubernetes cluster on your machine, making it an excellent choice for learning Kubernetes without the complexities of a production cluster.
